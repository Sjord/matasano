from base64 import b64decode 

e = 3
n = 131825777442991054036285698272417267719573154988646388380899770137694181672916523601769148522840159208703346031856332053282585184570264378938448855257720585217649562743558702779167696394269407445471876498768548546630872327094213842623682806285758426418845014239541262163848605482810781796119664294485066234391
d = 87883851628660702690857132181611511813048769992430925587266513425129454448611015734512765681893439472468897354570888035521723456380176252625632570171813708060859778820076798653984477509129884171259361970027393786466764123439541713089430340110806233162465714687288391935309873786256312910251515147684246230523

msg = 'VGhhdCdzIHdoeSBJIGZvdW5kIHlvdSBkb24ndCBwbGF5IGFyb3VuZCB3aXRoIHRoZSBGdW5reSBDb2xkIE1lZGluYQ=='

def is_even(cipher_num):
    return pow(cipher_num, d, n) % 2 == 0

def double(cipher_num):
    return (pow(2, e, n) * cipher_num) % n

msg_num = int.from_bytes(b64decode(msg), 'big')
assert msg_num < n
cipher_num = pow(msg_num, e, n)

lower, upper = 0, n
while upper > lower:
    cipher_num = double(cipher_num)
    if is_even(cipher_num):
        upper = (upper + lower) // 2
    else:
        lower = (upper + lower) // 2
    print(upper.to_bytes(128, 'big').strip(b'\0'))
